class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int d[5] = {0, 1, 0, -1, 0};
        int m = matrix.size();
        int n = matrix[0].size();
        int w = 0;
        vector<int> ans;
        int ni = -1, nj = 0; 
        for (int x = min(m, n) - 1; x >= 0; x--) {
            for (int i = 0; i < n; i++) {
                ni += d[w + 1];
                nj += d[w];
                cout<<nj<<" "<<ni<<endl;
                ans.push_back(matrix[nj][ni]);
            }

            w = (w + 1) % 4;
            for (int i = 0; i < m - 1; i++) {
                ni += d[w + 1];
                nj += d[w];
                ans.push_back(matrix[nj][ni]);
            }
            w = (w + 1) % 4;
            n--;
            m--;
        }
        return ans;
    }
};
// 0ms 8.40MB