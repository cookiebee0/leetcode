class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        int n = nums.size();
        for (int a = 0; a < n - 3; a++) {
            if ((long long)nums[a] + nums[a + 1] + nums[a + 2] + nums[a + 3] >
                target)
                break;
            if ((long long)nums[a] + nums[n - 1] + nums[n - 2] + nums[n - 3] <
                target)
                continue;
            if (a > 0 && nums[a] == nums[a - 1])
                continue;
            for (int b = a + 1; b < n - 2; b++) {
                if (b > a + 1 && nums[b] == nums[b - 1])
                    continue;
                if ((long long)nums[a] + nums[b] + nums[b + 2] + nums[b + 1] >
                    target)
                    break;
                if ((long long)nums[a] + nums[b] + nums[n - 2] + nums[n - 1] <
                    target)
                    continue;
                int c = b + 1;
                int d = n - 1;
                while (c < d) {
                    long long temp =
                        (long long)nums[a] + nums[b] + nums[c] + nums[d];
                    if (temp == target) {
                        ans.push_back({nums[a], nums[b], nums[c], nums[d]});
                        while (nums[d] == nums[d - 1] && c < d)
                        d--;
                        d--;
                        while (nums[c] == nums[c + 1] && c < d)
                        c++;
                        c++;
                    } else if (temp > target) {
                        d--;
                    } else {
                        c++;
                    }
                }
            }
        }
        return ans;
    }
};
// 0ms 16.22MB