class Solution {
public:
    int m, n;
    bool dfs(vector<vector<char>>& grid, vector<vector<vector<bool>>>& memo, int i, int j, int cnt) {
        if (i >= m || j >= n || cnt > m - i + n - j - 1 || cnt < 0) return false;
        if (i == m - 1 && j == n - 1) {
            return cnt == 1;
        }
        if (memo[i][j][cnt]) return false;
        memo[i][j][cnt] = true;
        cnt += grid[i][j] == '(' ? 1 : -1;
        return dfs(grid, memo, i + 1, j, cnt) || dfs(grid, memo, i, j + 1, cnt);
    }
    bool hasValidPath(vector<vector<char>>& grid) {
        this -> m = grid.size();
        this -> n = grid[0].size();
        if (grid[0][0] == ')' || grid[m - 1][n - 1] == '(' || (m + n - 1) % 2) return false;
        vector<vector<vector<bool>>> memo(m, vector<vector<bool>>(n, vector<bool>(((m + n + 1) / 2), 0)));
        return dfs(grid, memo, 0, 0, 0);
    }
};
// 62ms 28.24MB