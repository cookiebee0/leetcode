class Solution {
public:
    int m, n;
    const long long MOD = 1e9 + 7;
    int dir[5] = {1, 0, -1, 0, 1};
    vector<vector<int>> dp;
    int dfs(vector<vector<int>>& grid, int i, int j, int num) {
        if (i >= m || i < 0 || j < 0 || j >= n) return 0;
        if (num == -1) num = grid[i][j];
        else if (grid[i][j] >= num) return 0;
        else num = grid[i][j];
        if (dp[i][j] != 0) return dp[i][j];
        int cnt = 1;
        for (int t = 0; t <= 3; t++) {
            cnt += dfs(grid, i + dir[t], j + dir[t + 1], num);
        }
        dp[i][j] = cnt % MOD;
        return dp[i][j];
    }
    int countPaths(vector<vector<int>>& grid) {
        this->m = grid.size();
        this->n = grid[0].size();
        dp = vector<vector<int>> (m, vector<int> (n, 0));
        long long ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ans = (ans + (dp[i][j] ? dp[i][j] : dfs(grid, i, j, -1))) % MOD;
                // cout << dp[i][j] << " " ;
            }
            // cout << endl;
        }
        return ans;
    }
};
// 152ms 46.20MB