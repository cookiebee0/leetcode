class Solution {
public:
    bool isMatch(string s, string p) {
        int ls = s.length();
        int lp = p.length();
        vector<vector<bool>> dp(ls + 1, vector<bool>(lp + 1, false));
        
        dp[0][0] = true;

        // 初始化第一行，處理空字串和非空模式匹配的情況
        for (int j = 1; j <= lp; ++j) {
            if (p[j - 1] == '*') {
                dp[0][j] = dp[0][j - 2];
            }
        }

        for (int i = 1; i <= ls; ++i) {
            for (int j = 1; j <= lp; ++j) {
                if (p[j - 1] == s[i - 1] || p[j - 1] == '.') {
                    // 普通字符匹配或 '.' 匹配任何字符
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (p[j - 1] == '*') {
                    // '*' 的匹配：可以匹配零次或多次
                    dp[i][j] = dp[i][j - 2]; // '*' 匹配零次
                    if (p[j - 2] == s[i - 1] || p[j - 2] == '.') {
                        dp[i][j] = dp[i][j] || dp[i - 1][j]; // '*' 匹配多次
                    }
                }
            }
        }

        return dp[ls][lp];
    }
};
// 3ms 9.88MB