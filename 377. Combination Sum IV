class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
        // vector<int> memo(target + 1, -1);
        // function<int(int)> dfs = [&](int n) -> int {
        //     if (n == 0) return 1;
        //     int &temp = memo[n];
        //     if (temp != -1) return temp;
        //     temp = 0;
        //     for (auto i : nums) {
        //         if (n >= i)
        //         temp += dfs(n - i);
        //     }
        //     return temp;
        // };
        // return dfs(target);
        vector<unsigned> dp(target + 1, 0); // unsigned overflow won't error
        dp[0] = 1;
        for (int i = 1; i <= target; i++) {
            for (auto num : nums) {
                if (i >= num) 
                    dp[i] += dp[i - num];
            }
        }
        return dp[target];
    }
};
// 0ms 8.08MB