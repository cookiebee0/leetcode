class Solution {
public:
    const int dir[5] = {0, 1, 0, -1, 0};

    int minTimeToReach(vector<vector<int>>& moveTime) {
        int n = moveTime.size(), m = moveTime[0].size();
        priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>, greater<>> pq; 
        vector<vector<int>> vec(n, vector<int>(m, INT_MAX));
        vec[0][0] = 0;
        pq.push({0, 0, 0});
        while (1) {
            auto [t, i, j] = pq.top();
            pq.pop();
            if (i == n - 1 && j == m - 1) return t;
            if (t > vec[i][j]) continue;
            for (int z = 0; z < 4; z++) {
                int x = i + dir[z], y = j + dir[z + 1];
                if (x >= 0 && x < n && y >= 0 && y < m) {
                    int res = max(moveTime[x][y], t) + 1;
                    if (vec[x][y] > res) {
                        vec[x][y] = res;
                        pq.push({res, x, y});
                    }
                }
            }
        }
    }
};
// 21ms 29.92MB