class Solution {
    int xy[5] = {1, 0, -1, 0, 1};

public:
    void dfs(int x, int y, vector<vector<int>>& grid, int m, int n) {
        grid[x][y] = 2;
        for (int i = 0; i < 4; i++) {
            int tx = x + xy[i];
            int ty = y + xy[i + 1];
            if (tx >= 0 && tx < m && ty >= 0 && ty < n && grid[tx][ty] == 1)
                dfs(tx, ty, grid, m, n);
        }
    }
    int count(vector<vector<int>>& grid, int m, int n) {
        int cnt = 0;
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    cnt++;
                    dfs(i, j, grid, m, n);
                }
            }
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 2) {
                    grid[i][j] = 1;
                }
            }
        return cnt;
    }
    int minDays(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int check = count(grid, m, n);
        if (check != 1)
            return 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    grid[i][j] = 0;
                    check = count(grid, m, n);
                    if (check != 1)
                        return 1;
                    grid[i][j] = 1;
                }
            }
        }
        return 2;
    };
};
// 33ms 11.57MB