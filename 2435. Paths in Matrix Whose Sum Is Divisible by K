// class Solution {
// public:
//     int numberOfPaths(vector<vector<int>>& grid, int k) {
//         int m = grid.size(), n = grid[0].size();
//         const int MOD = 1e9 + 7;
//         vector<vector<unordered_map<int, int>>> v(m, vector<unordered_map<int, int>>(n));

//         v[0][0][grid[0][0] % k]++;
//         for (int i = 1; i < m; i++) {
//             grid[i][0] += grid[i - 1][0];
//             v[i][0][grid[i][0] % k]++;
//         }
//         for (int i = 1; i < n; i++) {
//             grid[0][i] += grid[0][i - 1];
//             v[0][i][grid[0][i] % k]++;
//         }

//         for (int i = 1; i < m; i++) {
//             for (int j = 1; j < n; j++) {
//                 int num = grid[i][j];
//                 for (auto &it : v[i - 1][j]) {
//                     v[i][j][(it.first + num) % k] = (v[i][j][(it.first + num) % k] + it.second) % MOD;
//                 }
//                 for (auto &it : v[i][j - 1]) {
//                     v[i][j][(it.first + num) % k] = (v[i][j][(it.first + num) % k] + it.second) % MOD;
//                 }
//             }
//         }
//         return v[m - 1][n - 1][0];
//     }
// };
// 1602ms 472.56MB
class Solution {
public:
    int numberOfPaths(vector<vector<int>>& grid, int k) {
        int m = grid.size(), n = grid[0].size();
        const int MOD = 1e9 + 7;
        int v[m][n][k];
        memset (v, 0, sizeof(v));

        v[0][0][grid[0][0] % k]++;
        for (int i = 1; i < m; i++) {
            grid[i][0] += grid[i - 1][0];
            v[i][0][grid[i][0] % k] = 1;
        }
        for (int i = 1; i < n; i++) {
            grid[0][i] += grid[0][i - 1];
            v[0][i][grid[0][i] % k] = 1;
        }

        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                int num = grid[i][j];
                for (int l = 0; l < k; l++) {
                    int up = v[i - 1][j][l];
                    if (up != 0) {
                        v[i][j][(l + num) % k] = (v[i][j][(l + num) % k] + up) % MOD;
                    }
                    int left = v[i][j - 1][l];
                    if (left != 0) {
                        v[i][j][(l + num) % k] = (v[i][j][(l + num) % k] + left) % MOD;
                    }
                }
            }
        }
        return v[m - 1][n - 1][0];
    }
};
// 93ms 47.99MB