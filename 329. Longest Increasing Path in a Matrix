class Solution {
public:
    int m, n;
    int dir[5] = {1, 0, -1, 0, 1};
    int dfs(vector<vector<int>>& matrix, vector<vector<int>>& dp, int i, int j, int num) {
        if (i >= m || i < 0 || j < 0 || j >= n) return 0;
        if (num == -1) num = matrix[i][j];
        else if (matrix[i][j] >= num) return 0;
        else
        num = matrix[i][j];
        if (dp[i][j] != 0) return dp[i][j];
        int cnt = 1;
        for (int t = 0; t <= 3; t++) {
            cnt = max(cnt, 1 + dfs(matrix, dp, i + dir[t], j + dir[t + 1], num));
        }
        dp[i][j] = cnt;
        return cnt;
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        this->m = matrix.size();
        this->n = matrix[0].size();
        vector<vector<int>> dp(m, vector<int> (n, 0));
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int &it = dp[i][j];
                if (it == 0) {
                    it = dfs(matrix, dp, i, j, -1);
                }
                ans = max(ans, it);
                // cout << dp[i][j] << " " ;
            }
            // cout << endl;
        }
        return ans;
    }
};
// 27ms 19.34MB