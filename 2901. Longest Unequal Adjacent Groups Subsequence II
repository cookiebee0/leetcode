class Solution {
public: 
    bool check(string& s, string& t) {
        if (s.size() != t.size()) return false;
        bool c = false;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] != t[i]) {
                if (c) return false;
                c = true;
            }
        }
        return c;
    }
    vector<string> getWordsInLongestSubsequence(vector<string>& words, vector<int>& groups) {
        int n = words.size(), m = n - 1;
        vector<int> f(n), form(n);
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                if (f[i] < f[j] && groups[i] != groups[j] && check(words[i], words[j])) {
                    f[i] = f[j];
                    form[i] = j;
                }
            }
            f[i]++;
            if (f[i] > f[m]) m = i;
        }
        int t = f[m];
        vector<string> ans(t);
        for (int i = 0; i < t; i++) {
            ans[i] = words[m];
            m = form[m];
        }
        return ans;
    }
};
// 28ms 34.10MB