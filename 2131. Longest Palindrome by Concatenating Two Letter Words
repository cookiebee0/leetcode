class Solution {
public:
    int longestPalindrome(vector<string>& words) {
        // unordered_map<string, int> um;
        // int ans = 0, cnt = 0;
        // for (string& s: words) {
        //     string temp = "";
        //     temp += s[1];
        //     temp += s[0];
        //     if (s == temp) {
        //         if (um.count(s) && um[s] > 0) {
        //             um[s]--;
        //             ans++;
        //             cnt--;
        //         } else{
        //             um[s]++;
        //             cnt++;
        //         }
        //     } else if (um.count(s)) {
        //         if (um[s]++ < 0) ans++;
        //     } else if (um.count(temp)) {
        //         if (um[temp]-- > 0) ans++;
        //     } else {
        //         um[s]++;
        //     }
        // }
        // cout << ans << " " << cnt;
        // return (ans * 2 + (cnt > 0)) * 2;
        const int t = 26;
        int e[t][t] = {};
        int ans = 0;
        bool flag = false;
        for (auto& i : words) {
            e[i[0] - 'a'][i[1] - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (!flag && e[i][i] % 2) {
                flag = true;
                ans++;
            }
            ans += e[i][i] - e[i][i] % 2;
            for (int j = i + 1; j < 26; j++) {
                ans += min(e[i][j], e[j][i]) * 2;
            }
        }
        return ans * 2;
    }
};
// 1ms 171.89MB