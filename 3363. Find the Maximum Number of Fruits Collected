class Solution {
public:
    int maxCollectedFruits(vector<vector<int>>& fruits) {
        // int ans = 0, n = fruits.size();
        // for (int i = 0; i < n; i++) {
        //     ans += fruits[i][i];
        //     fruits[i][i] = 0;
        // }
        // vector mem(n, vector(n, -1));
        // // 下三角
        // auto dfs = [&](this auto& dfs, int i, int j) -> int {
        //     if (i == n - 1 && j == n - 1) return fruits[i][i];
        //     if (j + i < n - 1 || j < i || j >= n) return INT_MIN;
        //     int& res = mem[i][j];
        //     if (res != -1) return res;
        //     return res = fruits[i][j] + max({dfs(i + 1, j), dfs(i + 1, j + 1),
        //                                      dfs(i + 1, j - 1)});
        // };
        // ans += dfs(0, n - 1);
        // // 初始化
        // ranges::fill(mem, vector<int>(n, -1));
        // // 轉移 右三角 -> 下三角
        // for (int i = 0; i < n; i++) {
        //     for (int j = n - 1; j > i && j + i >= n - 1; j--) {
        //         fruits[i][j] = fruits[j][i];
        //     }
        // }
        // return ans + dfs(0, n - 1);
        int n = fruits.size(), ans = 0;
        for (int i = 0; i < n; i++) ans += fruits[i][i];
        auto dp = [&]() {
            vector f(n - 1, vector(n + 1, -1));
            f[0][n - 1] = fruits[0][n - 1];
            for (int i = 1; i < n - 1; i++) {
                for (int j = max(n - 1 - i, i + 1); j < n; j++) {
                    f[i][j] = max({f[i - 1][j - 1], f[i - 1][j], f[i - 1][j + 1]}) + fruits[i][j];
                }
            }
            return f[n - 2][n - 1];
        };
        ans += dp();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                fruits[j][i] = fruits[i][j];
            }
        }
        return ans + dp();
    }
};
// 44ms 174.04MB